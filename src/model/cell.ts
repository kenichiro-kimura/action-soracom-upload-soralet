/**
 * SORACOM API
 * SORACOM API v1
 *
 * The version of the OpenAPI document: 20230427-035008
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class Cell {
    /**
    * The Cell Identity (for 2G and 3G networks), a 16 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 4.3)
    */
    'ci'?: number;
    /**
    * The E-UTRAN Cell Identifier (for LTE networks), a 28 bit value represented in decimal form as a long. (See 3GPP TS 23.003 19.6)
    */
    'eci'?: number;
    /**
    * The Location Area Code (for 2G and 3G networks), a 16 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 4.1)
    */
    'lac'?: number;
    /**
    * The Mobile Country Code, a 3 digit number.
    */
    'mcc'?: number;
    /**
    * The Mobile Network Code, a 2 or 3 digit number. If the value returned is only 1 digit in length, then you should prepend the value with a leading zero.
    */
    'mnc'?: number;
    /**
    * The Routing Area Code (for 2G and 3G networks), an 8 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 4.2)
    */
    'rac'?: number;
    /**
    * IoT SIM が接続されている無線アクセス技術またはネットワークの種類。  **Warning**: 通信キャリアの設備によっては、実際に利用されている無線アクセス技術またはネットワークの種類と異なる情報が表示されることがあります。たとえば、LTE-M で接続されている場合でも LTE と表示されることがあります。 
    */
    'radioType'?: Cell.RadioTypeEnum;
    /**
    * The Service Area Code (for 2G and 3G networks), a 16 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 12.5)
    */
    'sac'?: number;
    /**
    * The Tracking Area Code (for LTE networks), a 16 bit value represented in decimal form as an integer. (See 3GPP TS 23.003 19.4.2.3)
    */
    'tac'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ci",
            "baseName": "ci",
            "type": "number"
        },
        {
            "name": "eci",
            "baseName": "eci",
            "type": "number"
        },
        {
            "name": "lac",
            "baseName": "lac",
            "type": "number"
        },
        {
            "name": "mcc",
            "baseName": "mcc",
            "type": "number"
        },
        {
            "name": "mnc",
            "baseName": "mnc",
            "type": "number"
        },
        {
            "name": "rac",
            "baseName": "rac",
            "type": "number"
        },
        {
            "name": "radioType",
            "baseName": "radioType",
            "type": "Cell.RadioTypeEnum"
        },
        {
            "name": "sac",
            "baseName": "sac",
            "type": "number"
        },
        {
            "name": "tac",
            "baseName": "tac",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Cell.attributeTypeMap;
    }
}

export namespace Cell {
    export enum RadioTypeEnum {
        _3G = <any> '3G',
        Gsm = <any> 'GSM',
        Lte = <any> 'LTE',
        LteM = <any> 'LTE-M',
        NbIoT = <any> 'NB-IoT'
    }
}
