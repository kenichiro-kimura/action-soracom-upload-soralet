/**
 * SORACOM API
 * SORACOM API v1
 *
 * The version of the OpenAPI document: 20230427-035008
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { CellIdentifier } from '../model/cellIdentifier';
import { CellLocation } from '../model/cellLocation';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.soracom.io/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CellLocationApiApiKeys {
    api_key,
    api_token,
}

export class CellLocationApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'api_key': new ApiKeyAuth('header', 'X-Soracom-API-Key'),
        'api_token': new ApiKeyAuth('header', 'X-Soracom-Token'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: CellLocationApiApiKeys, value: string) {
        (this.authentications as any)[CellLocationApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 基地局情報のリストから、それらの基地局の位置情報（緯度経度）のリストを取得します。 3G の場合は MCC, MNC, LAC, CID を指定してください。CID がなくてもおおよその位置を取得することができますが、精度は高くありません。 LTE (4G) の場合は MCC, MNC, TAC, ECID を指定してください。 基地局情報から位置情報への変換には外部のオープンなデータベースを利用していますので、情報が存在していなかったり誤っている場合もあります。
     * @summary 複数の基地局の位置情報を一度に取得する
     * @param cellIdentifier 基地局情報のリスト
     */
    public async batchGetCellLocations (cellIdentifier: Array<CellIdentifier>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<CellLocation>;  }> {
        const localVarPath = this.basePath + '/cell_locations';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'cellIdentifier' is not null or undefined
        if (cellIdentifier === null || cellIdentifier === undefined) {
            throw new Error('Required parameter cellIdentifier was null or undefined when calling batchGetCellLocations.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(cellIdentifier, "Array<CellIdentifier>")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.api_key.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.api_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.api_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<CellLocation>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<CellLocation>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * セル ID などの基地局情報から、その基地局の位置情報（緯度経度）を取得します。 3G の場合は MCC, MNC, LAC, CID を指定してください。CID がなくてもおおよその位置を取得することができますが、精度は高くありません。 LTE (4G) の場合は MCC, MNC, TAC, ECID を指定してください。 基地局情報から位置情報への変換には外部のオープンなデータベースを利用していますので、情報が存在していなかったり誤っている場合もあります。  3G の例 ``` $ curl -X GET \'https://api.soracom.io/v1/cell_locations?mcc=440&mnc=10&lac=195&cid=68485165\' \\ -H \"X-Soracom-API-Key: $X_SORACOM_API_KEY\" \\ -H \"X-Soracom-Token: $X_SORACOM_TOKEN\" ```  4G の例 ``` $ curl -X GET \'https://api.soracom.io/v1/cell_locations?mcc=440&mnc=10&tac=5840&ecid=44668480\' \\ -H \"X-Soracom-API-Key: $X_SORACOM_API_KEY\" \\ -H \"X-Soracom-Token: $X_SORACOM_TOKEN\" ``` 
     * @summary 基地局の位置情報を取得する
     * @param mcc MCC (Mobile Country Code) - 国コード
     * @param mnc MNC (Mobile Network Code) - ネットワークコード
     * @param lac LAC (Location Area Code) - エリアコード（3G 用）
     * @param cid CID (Cell ID) - セル ID（3G 用）
     * @param tac TAC (Tracking Area Code) - エリアコード（LTE 用）
     * @param ecid ECID (Enhanced Cell ID) - セル ID（LTE 用） - &#x60;ecid&#x60; もしくは &#x60;eci&#x60; のいずれかを指定してください。（どちらに値を指定しても結果は同一です）
     * @param eci ECID (Enhanced Cell ID) - セル ID（LTE 用） - &#x60;ecid&#x60; もしくは &#x60;eci&#x60; のいずれかを指定してください。（どちらに値を指定しても結果は同一です）
     */
    public async getCellLocation (mcc: string, mnc: string, lac?: string, cid?: string, tac?: string, ecid?: string, eci?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CellLocation;  }> {
        const localVarPath = this.basePath + '/cell_locations';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'mcc' is not null or undefined
        if (mcc === null || mcc === undefined) {
            throw new Error('Required parameter mcc was null or undefined when calling getCellLocation.');
        }

        // verify required parameter 'mnc' is not null or undefined
        if (mnc === null || mnc === undefined) {
            throw new Error('Required parameter mnc was null or undefined when calling getCellLocation.');
        }

        if (mcc !== undefined) {
            localVarQueryParameters['mcc'] = ObjectSerializer.serialize(mcc, "string");
        }

        if (mnc !== undefined) {
            localVarQueryParameters['mnc'] = ObjectSerializer.serialize(mnc, "string");
        }

        if (lac !== undefined) {
            localVarQueryParameters['lac'] = ObjectSerializer.serialize(lac, "string");
        }

        if (cid !== undefined) {
            localVarQueryParameters['cid'] = ObjectSerializer.serialize(cid, "string");
        }

        if (tac !== undefined) {
            localVarQueryParameters['tac'] = ObjectSerializer.serialize(tac, "string");
        }

        if (ecid !== undefined) {
            localVarQueryParameters['ecid'] = ObjectSerializer.serialize(ecid, "string");
        }

        if (eci !== undefined) {
            localVarQueryParameters['eci'] = ObjectSerializer.serialize(eci, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.api_key.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.api_key.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.api_token.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.api_token.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CellLocation;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CellLocation");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
